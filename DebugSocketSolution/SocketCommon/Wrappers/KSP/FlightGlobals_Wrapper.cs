//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrappers {
    
    
    [System.SerializableAttribute()]
    [SocketCommon.Attributes.InstanceNameAttribute("fetch")]
    public class FlightGlobals_Wrapper {    
        
        public System.Collections.Generic.List<CelestialBody> bodies;
        
        public float drag_multiplier;
        
        public float srfAttachStiffNess;
        
        public float stackAttachStiffNess;
        
        public Vessel_Wrapper activeVessel;
        
        public System.Collections.Generic.List<Vessel> vessels;
        
        public Camera_Wrapper mainCameraRef;
        
        public Transform_Wrapper vesselTargetTransform;
        
        public Vector3_Wrapper vesselTargetDelta;
        
        public Vector3_Wrapper vesselTargetDirection;
        
        public bool ready;
        
        public double ship_dns;
        
        public Quaternion_Wrapper ship_orientation;
        
        public Quaternion_Wrapper ship_orientation_offset;
        
        public float ship_heading;
        
        public double camera_altitude;
        
        public Vector3d_Wrapper camera_position;
        
        public CelestialBody_Wrapper currentMainBody;
        
        public Vector3d_Wrapper ship_tgtVelocity;
        
        public double ship_tgtSpeed;
        
        public System.Collections.Generic.List<UnityEngine.GameObject> physicalObjects;
        
        public bool overrideOrbit;
        
        public bool warpDriveActive;
        
        public FoRModes FoRMode;
        
        public System.Collections.Generic.List<CelestialBody> Bodies;
        
        public FlightGlobals_Wrapper fetch;
        
        public float vacuumTemperature;
        
        public float DragMultiplier;
        
        public float SrfAttachStiffNess;
        
        public float StackAttachStiffNess;
        
        public Part_Wrapper activeTarget;
        
        public Vessel_Wrapper ActiveVessel;
        
        public System.Collections.Generic.List<Vessel> Vessels;
        
        public double ship_altitude;
        
        public double ship_verticalSpeed;
        
        public double ship_geeForce;
        
        public Vector3d_Wrapper ship_velocity;
        
        public Vector3d_Wrapper ship_obtVelocity;
        
        public double ship_obtSpeed;
        
        public Vector3d_Wrapper ship_srfVelocity;
        
        public double ship_srfSpeed;
        
        public Vector3d_Wrapper ship_acceleration;
        
        public Vector3d_Wrapper ship_angularVelocity;
        
        public Vector3d_Wrapper ship_position;
        
        public Vector3d_Wrapper ship_CoM;
        
        public Vector3d_Wrapper ship_upAxis;
        
        public Vector3_Wrapper ship_MOI;
        
        public Vector3_Wrapper ship_angularMomentum;
        
        public Quaternion_Wrapper ship_rotation;
        
        public Orbit ship_orbit;
        
        public double ship_latitude;
        
        public double ship_longitude;
        
        public double ship_stP;
        
        public bool RefFrameIsRotating;
        
        public SurfaceRadius_Wrapper terrain;
        
        public ITargetable VesselTarget;
        
        public VesselTargetModes vesselTargetMode;
        
        public Vector3d_Wrapper upAxis;
        
        public bool useGUILayout;
        
        public bool enabled;
        
        public Transform_Wrapper transform;
        
        public Rigidbody_Wrapper rigidbody;
        
        public Rigidbody2D_Wrapper rigidbody2D;
        
        public Camera_Wrapper camera;
        
        public Light_Wrapper light;
        
        public Animation_Wrapper animation;
        
        public ConstantForce_Wrapper constantForce;
        
        public Renderer_Wrapper renderer;
        
        public AudioSource_Wrapper audio;
        
        public GUIText_Wrapper guiText;
        
        public NetworkView_Wrapper networkView;
        
        public GUIElement_Wrapper guiElement;
        
        public GUITexture_Wrapper guiTexture;
        
        public Collider_Wrapper collider;
        
        public Collider2D_Wrapper collider2D;
        
        public HingeJoint_Wrapper hingeJoint;
        
        public ParticleEmitter_Wrapper particleEmitter;
        
        public ParticleSystem_Wrapper particleSystem;
        
        public GameObject_Wrapper gameObject;
        
        public bool active;
        
        public string tag;
        
        public string name;
        
        public UnityEngine.HideFlags hideFlags;
    }
}
