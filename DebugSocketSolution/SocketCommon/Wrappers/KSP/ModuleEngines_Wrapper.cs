//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrappers {
    
    
    [System.SerializableAttribute()]
    public class ModuleEngines_Wrapper {
        
        public System.Collections.Generic.List<Propellant> propellants;
        
        public float mixtureDensity;
        
        public string engineID;
        
        public bool throttleLocked;
        
        public bool exhaustDamage;
        
        public float minThrust;
        
        public float maxThrust;
        
        public float ignitionThreshold;
        
        public bool allowRestart;
        
        public bool allowShutdown;
        
        public bool autoPositionFX;
        
        public string fxGroupPrefix;
        
        public bool useVelocityCurve;
        
        public float heatProduction;
        
        public Vector3_Wrapper fxOffset;
        
        public FloatCurve atmosphereCurve;
        
        public FloatCurve velocityCurve;
        
        public bool useEngineResponseTime;
        
        public float engineAccelerationSpeed;
        
        public float engineDecelerationSpeed;
        
        public string thrustVectorTransformName;
        
        public System.Collections.Generic.List<UnityEngine.Transform> thrustTransforms;
        
        public float fuelFlowGui;
        
        public float finalThrust;
        
        public float realIsp;
        
        public string status;
        
        public string statusL2;
        
        public float requestedThrust;
        
        public float requestedThrottle;
        
        public float g;
        
        public bool staged;
        
        public bool flameout;
        
        public bool EngineIgnited;
        
        public bool engineShutdown;
        
        public float currentThrottle;
        
        public float thrustPercentage;
        
        public bool manuallyOverridden;
        
        public FXGroup flameoutGroup;
        
        public FXGroup runningGroup;
        
        public FXGroup powerGroup;
        
        public FXGroup engageGroup;
        
        public FXGroup disengageGroup;
        
        public System.Collections.Generic.List<FXGroup> runningGroups;
        
        public System.Collections.Generic.List<FXGroup> flameoutGroups;
        
        public System.Collections.Generic.List<FXGroup> powerGroups;
        
        public AudioSource_Wrapper powerSfx;
        
        public string moduleName;
        
        public bool isEnabled;
        
        public ProtoPartModuleSnapshot_Wrapper snapshot;
        
        public float normalizedThrustOutput;
        
        public bool getFlameoutState;
        
        public bool getIgnitionState;
        
        public bool isOperational;
        
        public float normalizedOutput;
        
        public string ClassName;
        
        public int ClassID;
        
        public BaseEventList_Wrapper Events;
        
        public BaseFieldList Fields;
        
        public string GUIName;
        
        public BaseActionList Actions;
        
        public Part_Wrapper part;
        
        public Vessel_Wrapper vessel;
        
        public bool useGUILayout;
        
        public bool enabled;
        
        public Transform_Wrapper transform;
        
        public Rigidbody_Wrapper rigidbody;
        
        public Rigidbody2D_Wrapper rigidbody2D;
        
        public Camera_Wrapper camera;
        
        public Light_Wrapper light;
        
        public Animation_Wrapper animation;
        
        public ConstantForce_Wrapper constantForce;
        
        public Renderer_Wrapper renderer;
        
        public AudioSource_Wrapper audio;
        
        public GUIText_Wrapper guiText;
        
        public NetworkView_Wrapper networkView;
        
        public GUIElement_Wrapper guiElement;
        
        public GUITexture_Wrapper guiTexture;
        
        public Collider_Wrapper collider;
        
        public Collider2D_Wrapper collider2D;
        
        public HingeJoint_Wrapper hingeJoint;
        
        public ParticleEmitter_Wrapper particleEmitter;
        
        public ParticleSystem_Wrapper particleSystem;
        
        public GameObject_Wrapper gameObject;
        
        public bool active;
        
        public string tag;
        
        public string name;
        
        public UnityEngine.HideFlags hideFlags;
    }
}
