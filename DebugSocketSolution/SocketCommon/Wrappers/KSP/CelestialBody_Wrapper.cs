//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wrappers {
    
    
    [System.SerializableAttribute()]
    [SocketCommon.Attributes.InstanceNameAttribute("referenceBody")]
    public class CelestialBody_Wrapper {
        
        public string bodyName;
        
        public string bodyDescription;
        
        public double GeeASL;
        
        public double Radius;
        
        public double Mass;
        
        public double gravParameter;
        
        public double sphereOfInfluence;
        
        public double hillSphere;
        
        public double gMagnitudeAtCenter;
        
        public bool use_The_InName;
        
        public bool isHomeWorld;
        
        public bool ocean;
        
        public bool atmosphere;
        
        public double staticPressureASL;
        
        public double atmosphereScaleHeight;
        
        public bool atmosphereContainsOxygen;
        
        public AnimationCurve_Wrapper temperatureCurve;
        
        public float maxAtmosphereAltitude;
        
        public float altitudeMultiplier;
        
        public float altitudeOffset;
        
        public float atmoshpereTemperatureMultiplier;
        
        public bool useLegacyAtmosphere;
        
        public float atmosphereMultiplier;
        
        public AnimationCurve_Wrapper pressureCurve;
        
        public float pressureMultiplier;
        
        public QuaternionD_Wrapper rotation;
        
        public OrbitDriver_Wrapper orbitDriver;
        
        public PlanetQuadTreeController_Wrapper terrainController;
        
        public bool rotates;
        
        public double rotationPeriod;
        
        public bool solarRotationPeriod;
        
        public double initialRotation;
        
        public double rotationAngle;
        
        public double directRotAngle;
        
        public Vector3d_Wrapper angularVelocity;
        
        public Vector3d_Wrapper zUpAngularVelocity;
        
        public bool tidallyLocked;
        
        public bool inverseRotation;
        
        public float inverseRotThresholdAltitude;
        
        public double angularV;
        
        public float[] timeWarpAltitudeLimits;
        
        public Color_Wrapper atmosphericAmbientColor;
        
        public System.Collections.Generic.List<CelestialBody> orbitingBodies;
        
        public KSPAchievements.CelestialBodySubtree progressTree;
        
        public CelestialBodyType bodyType;
        
        public CelestialBodyScienceParams scienceValues;
        
        public CBAttributeMap BiomeMap;
        
        public Transform_Wrapper bodyTransform;
        
        public string theName;
        
        public int flightGlobalsIndex;
        
        public Vector3d_Wrapper position;
        
        public Orbit orbit;
        
        public CelestialBody_Wrapper referenceBody;
        
        public PResource_Wrapper Resources;
        
        public Texture2D_Wrapper ResourceMap;
        
        public DiscoveryInfo DiscoveryInfo;
        
        public bool useGUILayout;
        
        public bool enabled;
        
        public Transform_Wrapper transform;
        
        public Rigidbody_Wrapper rigidbody;
        
        public Rigidbody2D_Wrapper rigidbody2D;
        
        public Camera_Wrapper camera;
        
        public Light_Wrapper light;
        
        public Animation_Wrapper animation;
        
        public ConstantForce_Wrapper constantForce;
        
        public Renderer_Wrapper renderer;
        
        public AudioSource_Wrapper audio;
        
        public GUIText_Wrapper guiText;
        
        public NetworkView_Wrapper networkView;
        
        public GUIElement_Wrapper guiElement;
        
        public GUITexture_Wrapper guiTexture;
        
        public Collider_Wrapper collider;
        
        public Collider2D_Wrapper collider2D;
        
        public HingeJoint_Wrapper hingeJoint;
        
        public ParticleEmitter_Wrapper particleEmitter;
        
        public ParticleSystem_Wrapper particleSystem;
        
        public GameObject_Wrapper gameObject;
        
        public bool active;
        
        public string tag;
        
        public string name;
        
        public UnityEngine.HideFlags hideFlags;
    }
}
