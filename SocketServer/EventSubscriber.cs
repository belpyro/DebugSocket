//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SocketServer {
    using UnityEngine;
    
    
    public class EventSubscriber {
        
        private static EventSubscriber _instance;

        private EventSubscriber(){}

        public static EventSubscriber Instance
        {
            get { return _instance ?? ( _instance = new EventSubscriber()); }
        }

        public void Subscribe(string methodName) {
            if (methodName.Equals("onJointBreak")) {
                GameEvents.onJointBreak.Add(onJointBreak);
            }
            if (methodName.Equals("onCrash")) {
                GameEvents.onCrash.Add(onCrash);
            }
            if (methodName.Equals("onCrashSplashdown")) {
                GameEvents.onCrashSplashdown.Add(onCrashSplashdown);
            }
            if (methodName.Equals("onCollision")) {
                GameEvents.onCollision.Add(onCollision);
            }
            if (methodName.Equals("onOverheat")) {
                GameEvents.onOverheat.Add(onOverheat);
            }
            if (methodName.Equals("onStageSeparation")) {
                GameEvents.onStageSeparation.Add(onStageSeparation);
            }
            if (methodName.Equals("onCrewOnEva")) {
                GameEvents.onCrewOnEva.Add(onCrewOnEva);
            }
            if (methodName.Equals("onCrewKilled")) {
                GameEvents.onCrewKilled.Add(onCrewKilled);
            }
            if (methodName.Equals("onKerbalAdded")) {
                GameEvents.onKerbalAdded.Add(onKerbalAdded);
            }
            if (methodName.Equals("onKerbalRemoved")) {
                GameEvents.onKerbalRemoved.Add(onKerbalRemoved);
            }
            if (methodName.Equals("onKerbalTypeChange")) {
                GameEvents.onKerbalTypeChange.Add(onKerbalTypeChange);
            }
            if (methodName.Equals("onKerbalStatusChange")) {
                GameEvents.onKerbalStatusChange.Add(onKerbalStatusChange);
            }
            if (methodName.Equals("onCrewBoardVessel")) {
                GameEvents.onCrewBoardVessel.Add(onCrewBoardVessel);
            }
            if (methodName.Equals("onLaunch")) {
                GameEvents.onLaunch.Add(onLaunch);
            }
            if (methodName.Equals("onUndock")) {
                GameEvents.onUndock.Add(onUndock);
            }
            if (methodName.Equals("onSplashDamage")) {
                GameEvents.onSplashDamage.Add(onSplashDamage);
            }
            if (methodName.Equals("onNewVesselCreated")) {
                GameEvents.onNewVesselCreated.Add(onNewVesselCreated);
            }
            if (methodName.Equals("onVesselWillDestroy")) {
                GameEvents.onVesselWillDestroy.Add(onVesselWillDestroy);
            }
            if (methodName.Equals("onVesselCreate")) {
                GameEvents.onVesselCreate.Add(onVesselCreate);
            }
            if (methodName.Equals("onVesselDestroy")) {
                GameEvents.onVesselDestroy.Add(onVesselDestroy);
            }
            if (methodName.Equals("onVesselChange")) {
                GameEvents.onVesselChange.Add(onVesselChange);
            }
            if (methodName.Equals("onVesselSituationChange")) {
                GameEvents.onVesselSituationChange.Add(onVesselSituationChange);
            }
            if (methodName.Equals("onKnowledgeChanged")) {
                GameEvents.onKnowledgeChanged.Add(onKnowledgeChanged);
            }
            if (methodName.Equals("onVesselRename")) {
                GameEvents.onVesselRename.Add(onVesselRename);
            }
            if (methodName.Equals("onVesselGoOnRails")) {
                GameEvents.onVesselGoOnRails.Add(onVesselGoOnRails);
            }
            if (methodName.Equals("onVesselGoOffRails")) {
                GameEvents.onVesselGoOffRails.Add(onVesselGoOffRails);
            }
            if (methodName.Equals("onVesselLoaded")) {
                GameEvents.onVesselLoaded.Add(onVesselLoaded);
            }
            if (methodName.Equals("onVesselWasModified")) {
                GameEvents.onVesselWasModified.Add(onVesselWasModified);
            }
            if (methodName.Equals("onVesselSOIChanged")) {
                GameEvents.onVesselSOIChanged.Add(onVesselSOIChanged);
            }
            if (methodName.Equals("onVesselOrbitClosed")) {
                GameEvents.onVesselOrbitClosed.Add(onVesselOrbitClosed);
            }
            if (methodName.Equals("onVesselOrbitEscaped")) {
                GameEvents.onVesselOrbitEscaped.Add(onVesselOrbitEscaped);
            }
            if (methodName.Equals("OnVesselRecoveryRequested")) {
                GameEvents.OnVesselRecoveryRequested.Add(OnVesselRecoveryRequested);
            }
            if (methodName.Equals("onVesselRecovered")) {
                GameEvents.onVesselRecovered.Add(onVesselRecovered);
            }
            if (methodName.Equals("onVesselTerminated")) {
                GameEvents.onVesselTerminated.Add(onVesselTerminated);
            }
            if (methodName.Equals("onSameVesselDock")) {
                GameEvents.onSameVesselDock.Add(onSameVesselDock);
            }
            if (methodName.Equals("onSameVesselUndock")) {
                GameEvents.onSameVesselUndock.Add(onSameVesselUndock);
            }
            if (methodName.Equals("onStageActivate")) {
                GameEvents.onStageActivate.Add(onStageActivate);
            }
            if (methodName.Equals("onDominantBodyChange")) {
                GameEvents.onDominantBodyChange.Add(onDominantBodyChange);
            }
            if (methodName.Equals("onKrakensbaneEngage")) {
                GameEvents.onKrakensbaneEngage.Add(onKrakensbaneEngage);
            }
            if (methodName.Equals("onKrakensbaneDisengage")) {
                GameEvents.onKrakensbaneDisengage.Add(onKrakensbaneDisengage);
            }
            if (methodName.Equals("onFloatingOriginShift")) {
                GameEvents.onFloatingOriginShift.Add(onFloatingOriginShift);
            }
            if (methodName.Equals("onRotatingFrameTransition")) {
                GameEvents.onRotatingFrameTransition.Add(onRotatingFrameTransition);
            }
            if (methodName.Equals("onGamePause")) {
                GameEvents.onGamePause.Add(onGamePause);
            }
            if (methodName.Equals("onGameUnpause")) {
                GameEvents.onGameUnpause.Add(onGameUnpause);
            }
            if (methodName.Equals("onFlightReady")) {
                GameEvents.onFlightReady.Add(onFlightReady);
            }
            if (methodName.Equals("onTimeWarpRateChanged")) {
                GameEvents.onTimeWarpRateChanged.Add(onTimeWarpRateChanged);
            }
            if (methodName.Equals("onGameSceneLoadRequested")) {
                GameEvents.onGameSceneLoadRequested.Add(onGameSceneLoadRequested);
            }
            if (methodName.Equals("onLevelWasLoaded")) {
                GameEvents.onLevelWasLoaded.Add(onLevelWasLoaded);
            }
            if (methodName.Equals("onPlanetariumTargetChanged")) {
                GameEvents.onPlanetariumTargetChanged.Add(onPlanetariumTargetChanged);
            }
            if (methodName.Equals("onGameStateSaved")) {
                GameEvents.onGameStateSaved.Add(onGameStateSaved);
            }
            if (methodName.Equals("onGameStateCreated")) {
                GameEvents.onGameStateCreated.Add(onGameStateCreated);
            }
            if (methodName.Equals("onGameStateSave")) {
                GameEvents.onGameStateSave.Add(onGameStateSave);
            }
            if (methodName.Equals("onGameStateLoad")) {
                GameEvents.onGameStateLoad.Add(onGameStateLoad);
            }
            if (methodName.Equals("onInputLocksModified")) {
                GameEvents.onInputLocksModified.Add(onInputLocksModified);
            }
            if (methodName.Equals("OnGameSettingsApplied")) {
                GameEvents.OnGameSettingsApplied.Add(OnGameSettingsApplied);
            }
            if (methodName.Equals("onPartPack")) {
                GameEvents.onPartPack.Add(onPartPack);
            }
            if (methodName.Equals("onPartUnpack")) {
                GameEvents.onPartUnpack.Add(onPartUnpack);
            }
            if (methodName.Equals("onPartExplode")) {
                GameEvents.onPartExplode.Add(onPartExplode);
            }
            if (methodName.Equals("onPartDie")) {
                GameEvents.onPartDie.Add(onPartDie);
            }
            if (methodName.Equals("onPartDestroyed")) {
                GameEvents.onPartDestroyed.Add(onPartDestroyed);
            }
            if (methodName.Equals("onPartJointBreak")) {
                GameEvents.onPartJointBreak.Add(onPartJointBreak);
            }
            if (methodName.Equals("onPartUndock")) {
                GameEvents.onPartUndock.Add(onPartUndock);
            }
            if (methodName.Equals("onPartCouple")) {
                GameEvents.onPartCouple.Add(onPartCouple);
            }
            if (methodName.Equals("onPartAttach")) {
                GameEvents.onPartAttach.Add(onPartAttach);
            }
            if (methodName.Equals("onPartRemove")) {
                GameEvents.onPartRemove.Add(onPartRemove);
            }
            if (methodName.Equals("onPartActionUICreate")) {
                GameEvents.onPartActionUICreate.Add(onPartActionUICreate);
            }
            if (methodName.Equals("onPartActionUIDismiss")) {
                GameEvents.onPartActionUIDismiss.Add(onPartActionUIDismiss);
            }
            if (methodName.Equals("onFlagSelect")) {
                GameEvents.onFlagSelect.Add(onFlagSelect);
            }
            if (methodName.Equals("onMissionFlagSelect")) {
                GameEvents.onMissionFlagSelect.Add(onMissionFlagSelect);
            }
            if (methodName.Equals("onFlagPlant")) {
                GameEvents.onFlagPlant.Add(onFlagPlant);
            }
            if (methodName.Equals("onActiveJointNeedUpdate")) {
                GameEvents.onActiveJointNeedUpdate.Add(onActiveJointNeedUpdate);
            }
            if (methodName.Equals("onGUILaunchScreenSpawn")) {
                GameEvents.onGUILaunchScreenSpawn.Add(onGUILaunchScreenSpawn);
            }
            if (methodName.Equals("onGUILaunchScreenDespawn")) {
                GameEvents.onGUILaunchScreenDespawn.Add(onGUILaunchScreenDespawn);
            }
            if (methodName.Equals("onGUILaunchScreenVesselSelected")) {
                GameEvents.onGUILaunchScreenVesselSelected.Add(onGUILaunchScreenVesselSelected);
            }
            if (methodName.Equals("onGUIAstronautComplexSpawn")) {
                GameEvents.onGUIAstronautComplexSpawn.Add(onGUIAstronautComplexSpawn);
            }
            if (methodName.Equals("onGUIAstronautComplexDespawn")) {
                GameEvents.onGUIAstronautComplexDespawn.Add(onGUIAstronautComplexDespawn);
            }
            if (methodName.Equals("onGUIRnDComplexSpawn")) {
                GameEvents.onGUIRnDComplexSpawn.Add(onGUIRnDComplexSpawn);
            }
            if (methodName.Equals("onGUIRnDComplexDespawn")) {
                GameEvents.onGUIRnDComplexDespawn.Add(onGUIRnDComplexDespawn);
            }
            if (methodName.Equals("onGUIMissionControlSpawn")) {
                GameEvents.onGUIMissionControlSpawn.Add(onGUIMissionControlSpawn);
            }
            if (methodName.Equals("onGUIMissionControlDespawn")) {
                GameEvents.onGUIMissionControlDespawn.Add(onGUIMissionControlDespawn);
            }
            if (methodName.Equals("onGUIRecoveryDialogSpawn")) {
                GameEvents.onGUIRecoveryDialogSpawn.Add(onGUIRecoveryDialogSpawn);
            }
            if (methodName.Equals("onGUIRecoveryDialogDespawn")) {
                GameEvents.onGUIRecoveryDialogDespawn.Add(onGUIRecoveryDialogDespawn);
            }
            if (methodName.Equals("onHideUI")) {
                GameEvents.onHideUI.Add(onHideUI);
            }
            if (methodName.Equals("onShowUI")) {
                GameEvents.onShowUI.Add(onShowUI);
            }
            if (methodName.Equals("onGUIPrefabLauncherReady")) {
                GameEvents.onGUIPrefabLauncherReady.Add(onGUIPrefabLauncherReady);
            }
            if (methodName.Equals("onGUIApplicationLauncherReady")) {
                GameEvents.onGUIApplicationLauncherReady.Add(onGUIApplicationLauncherReady);
            }
            if (methodName.Equals("onGUIApplicationLauncherDestroyed")) {
                GameEvents.onGUIApplicationLauncherDestroyed.Add(onGUIApplicationLauncherDestroyed);
            }
            if (methodName.Equals("onGUIMessageSystemReady")) {
                GameEvents.onGUIMessageSystemReady.Add(onGUIMessageSystemReady);
            }
            if (methodName.Equals("onEditorShipModified")) {
                GameEvents.onEditorShipModified.Add(onEditorShipModified);
            }
            if (methodName.Equals("OnTechnologyResearched")) {
                GameEvents.OnTechnologyResearched.Add(OnTechnologyResearched);
            }
            if (methodName.Equals("OnPartPurchased")) {
                GameEvents.OnPartPurchased.Add(OnPartPurchased);
            }
            if (methodName.Equals("OnVesselRollout")) {
                GameEvents.OnVesselRollout.Add(OnVesselRollout);
            }
            if (methodName.Equals("OnProgressReached")) {
                GameEvents.OnProgressReached.Add(OnProgressReached);
            }
            if (methodName.Equals("OnProgressComplete")) {
                GameEvents.OnProgressComplete.Add(OnProgressComplete);
            }
            if (methodName.Equals("OnProgressAchieved")) {
                GameEvents.OnProgressAchieved.Add(OnProgressAchieved);
            }
            if (methodName.Equals("OnScienceRecieved")) {
                GameEvents.OnScienceRecieved.Add(OnScienceRecieved);
            }
            if (methodName.Equals("OnReputationChanged")) {
                GameEvents.OnReputationChanged.Add(OnReputationChanged);
            }
            if (methodName.Equals("OnScienceChanged")) {
                GameEvents.OnScienceChanged.Add(OnScienceChanged);
            }
            if (methodName.Equals("OnFundsChanged")) {
                GameEvents.OnFundsChanged.Add(OnFundsChanged);
            }
            if (methodName.Equals("onVesselRecoveryProcessing")) {
                GameEvents.onVesselRecoveryProcessing.Add(onVesselRecoveryProcessing);
            }
        }
        
        public void UnSubscribe(string methodName) {
            if (methodName.Equals("onJointBreak")) {
                GameEvents.onJointBreak.Remove(onJointBreak);
            }
            if (methodName.Equals("onCrash")) {
                GameEvents.onCrash.Remove(onCrash);
            }
            if (methodName.Equals("onCrashSplashdown")) {
                GameEvents.onCrashSplashdown.Remove(onCrashSplashdown);
            }
            if (methodName.Equals("onCollision")) {
                GameEvents.onCollision.Remove(onCollision);
            }
            if (methodName.Equals("onOverheat")) {
                GameEvents.onOverheat.Remove(onOverheat);
            }
            if (methodName.Equals("onStageSeparation")) {
                GameEvents.onStageSeparation.Remove(onStageSeparation);
            }
            if (methodName.Equals("onCrewOnEva")) {
                GameEvents.onCrewOnEva.Remove(onCrewOnEva);
            }
            if (methodName.Equals("onCrewKilled")) {
                GameEvents.onCrewKilled.Remove(onCrewKilled);
            }
            if (methodName.Equals("onKerbalAdded")) {
                GameEvents.onKerbalAdded.Remove(onKerbalAdded);
            }
            if (methodName.Equals("onKerbalRemoved")) {
                GameEvents.onKerbalRemoved.Remove(onKerbalRemoved);
            }
            if (methodName.Equals("onKerbalTypeChange")) {
                GameEvents.onKerbalTypeChange.Remove(onKerbalTypeChange);
            }
            if (methodName.Equals("onKerbalStatusChange")) {
                GameEvents.onKerbalStatusChange.Remove(onKerbalStatusChange);
            }
            if (methodName.Equals("onCrewBoardVessel")) {
                GameEvents.onCrewBoardVessel.Remove(onCrewBoardVessel);
            }
            if (methodName.Equals("onLaunch")) {
                GameEvents.onLaunch.Remove(onLaunch);
            }
            if (methodName.Equals("onUndock")) {
                GameEvents.onUndock.Remove(onUndock);
            }
            if (methodName.Equals("onSplashDamage")) {
                GameEvents.onSplashDamage.Remove(onSplashDamage);
            }
            if (methodName.Equals("onNewVesselCreated")) {
                GameEvents.onNewVesselCreated.Remove(onNewVesselCreated);
            }
            if (methodName.Equals("onVesselWillDestroy")) {
                GameEvents.onVesselWillDestroy.Remove(onVesselWillDestroy);
            }
            if (methodName.Equals("onVesselCreate")) {
                GameEvents.onVesselCreate.Remove(onVesselCreate);
            }
            if (methodName.Equals("onVesselDestroy")) {
                GameEvents.onVesselDestroy.Remove(onVesselDestroy);
            }
            if (methodName.Equals("onVesselChange")) {
                GameEvents.onVesselChange.Remove(onVesselChange);
            }
            if (methodName.Equals("onVesselSituationChange")) {
                GameEvents.onVesselSituationChange.Remove(onVesselSituationChange);
            }
            if (methodName.Equals("onKnowledgeChanged")) {
                GameEvents.onKnowledgeChanged.Remove(onKnowledgeChanged);
            }
            if (methodName.Equals("onVesselRename")) {
                GameEvents.onVesselRename.Remove(onVesselRename);
            }
            if (methodName.Equals("onVesselGoOnRails")) {
                GameEvents.onVesselGoOnRails.Remove(onVesselGoOnRails);
            }
            if (methodName.Equals("onVesselGoOffRails")) {
                GameEvents.onVesselGoOffRails.Remove(onVesselGoOffRails);
            }
            if (methodName.Equals("onVesselLoaded")) {
                GameEvents.onVesselLoaded.Remove(onVesselLoaded);
            }
            if (methodName.Equals("onVesselWasModified")) {
                GameEvents.onVesselWasModified.Remove(onVesselWasModified);
            }
            if (methodName.Equals("onVesselSOIChanged")) {
                GameEvents.onVesselSOIChanged.Remove(onVesselSOIChanged);
            }
            if (methodName.Equals("onVesselOrbitClosed")) {
                GameEvents.onVesselOrbitClosed.Remove(onVesselOrbitClosed);
            }
            if (methodName.Equals("onVesselOrbitEscaped")) {
                GameEvents.onVesselOrbitEscaped.Remove(onVesselOrbitEscaped);
            }
            if (methodName.Equals("OnVesselRecoveryRequested")) {
                GameEvents.OnVesselRecoveryRequested.Remove(OnVesselRecoveryRequested);
            }
            if (methodName.Equals("onVesselRecovered")) {
                GameEvents.onVesselRecovered.Remove(onVesselRecovered);
            }
            if (methodName.Equals("onVesselTerminated")) {
                GameEvents.onVesselTerminated.Remove(onVesselTerminated);
            }
            if (methodName.Equals("onSameVesselDock")) {
                GameEvents.onSameVesselDock.Remove(onSameVesselDock);
            }
            if (methodName.Equals("onSameVesselUndock")) {
                GameEvents.onSameVesselUndock.Remove(onSameVesselUndock);
            }
            if (methodName.Equals("onStageActivate")) {
                GameEvents.onStageActivate.Remove(onStageActivate);
            }
            if (methodName.Equals("onDominantBodyChange")) {
                GameEvents.onDominantBodyChange.Remove(onDominantBodyChange);
            }
            if (methodName.Equals("onKrakensbaneEngage")) {
                GameEvents.onKrakensbaneEngage.Remove(onKrakensbaneEngage);
            }
            if (methodName.Equals("onKrakensbaneDisengage")) {
                GameEvents.onKrakensbaneDisengage.Remove(onKrakensbaneDisengage);
            }
            if (methodName.Equals("onFloatingOriginShift")) {
                GameEvents.onFloatingOriginShift.Remove(onFloatingOriginShift);
            }
            if (methodName.Equals("onRotatingFrameTransition")) {
                GameEvents.onRotatingFrameTransition.Remove(onRotatingFrameTransition);
            }
            if (methodName.Equals("onGamePause")) {
                GameEvents.onGamePause.Remove(onGamePause);
            }
            if (methodName.Equals("onGameUnpause")) {
                GameEvents.onGameUnpause.Remove(onGameUnpause);
            }
            if (methodName.Equals("onFlightReady")) {
                GameEvents.onFlightReady.Remove(onFlightReady);
            }
            if (methodName.Equals("onTimeWarpRateChanged")) {
                GameEvents.onTimeWarpRateChanged.Remove(onTimeWarpRateChanged);
            }
            if (methodName.Equals("onGameSceneLoadRequested")) {
                GameEvents.onGameSceneLoadRequested.Remove(onGameSceneLoadRequested);
            }
            if (methodName.Equals("onLevelWasLoaded")) {
                GameEvents.onLevelWasLoaded.Remove(onLevelWasLoaded);
            }
            if (methodName.Equals("onPlanetariumTargetChanged")) {
                GameEvents.onPlanetariumTargetChanged.Remove(onPlanetariumTargetChanged);
            }
            if (methodName.Equals("onGameStateSaved")) {
                GameEvents.onGameStateSaved.Remove(onGameStateSaved);
            }
            if (methodName.Equals("onGameStateCreated")) {
                GameEvents.onGameStateCreated.Remove(onGameStateCreated);
            }
            if (methodName.Equals("onGameStateSave")) {
                GameEvents.onGameStateSave.Remove(onGameStateSave);
            }
            if (methodName.Equals("onGameStateLoad")) {
                GameEvents.onGameStateLoad.Remove(onGameStateLoad);
            }
            if (methodName.Equals("onInputLocksModified")) {
                GameEvents.onInputLocksModified.Remove(onInputLocksModified);
            }
            if (methodName.Equals("OnGameSettingsApplied")) {
                GameEvents.OnGameSettingsApplied.Remove(OnGameSettingsApplied);
            }
            if (methodName.Equals("onPartPack")) {
                GameEvents.onPartPack.Remove(onPartPack);
            }
            if (methodName.Equals("onPartUnpack")) {
                GameEvents.onPartUnpack.Remove(onPartUnpack);
            }
            if (methodName.Equals("onPartExplode")) {
                GameEvents.onPartExplode.Remove(onPartExplode);
            }
            if (methodName.Equals("onPartDie")) {
                GameEvents.onPartDie.Remove(onPartDie);
            }
            if (methodName.Equals("onPartDestroyed")) {
                GameEvents.onPartDestroyed.Remove(onPartDestroyed);
            }
            if (methodName.Equals("onPartJointBreak")) {
                GameEvents.onPartJointBreak.Remove(onPartJointBreak);
            }
            if (methodName.Equals("onPartUndock")) {
                GameEvents.onPartUndock.Remove(onPartUndock);
            }
            if (methodName.Equals("onPartCouple")) {
                GameEvents.onPartCouple.Remove(onPartCouple);
            }
            if (methodName.Equals("onPartAttach")) {
                GameEvents.onPartAttach.Remove(onPartAttach);
            }
            if (methodName.Equals("onPartRemove")) {
                GameEvents.onPartRemove.Remove(onPartRemove);
            }
            if (methodName.Equals("onPartActionUICreate")) {
                GameEvents.onPartActionUICreate.Remove(onPartActionUICreate);
            }
            if (methodName.Equals("onPartActionUIDismiss")) {
                GameEvents.onPartActionUIDismiss.Remove(onPartActionUIDismiss);
            }
            if (methodName.Equals("onFlagSelect")) {
                GameEvents.onFlagSelect.Remove(onFlagSelect);
            }
            if (methodName.Equals("onMissionFlagSelect")) {
                GameEvents.onMissionFlagSelect.Remove(onMissionFlagSelect);
            }
            if (methodName.Equals("onFlagPlant")) {
                GameEvents.onFlagPlant.Remove(onFlagPlant);
            }
            if (methodName.Equals("onActiveJointNeedUpdate")) {
                GameEvents.onActiveJointNeedUpdate.Remove(onActiveJointNeedUpdate);
            }
            if (methodName.Equals("onGUILaunchScreenSpawn")) {
                GameEvents.onGUILaunchScreenSpawn.Remove(onGUILaunchScreenSpawn);
            }
            if (methodName.Equals("onGUILaunchScreenDespawn")) {
                GameEvents.onGUILaunchScreenDespawn.Remove(onGUILaunchScreenDespawn);
            }
            if (methodName.Equals("onGUILaunchScreenVesselSelected")) {
                GameEvents.onGUILaunchScreenVesselSelected.Remove(onGUILaunchScreenVesselSelected);
            }
            if (methodName.Equals("onGUIAstronautComplexSpawn")) {
                GameEvents.onGUIAstronautComplexSpawn.Remove(onGUIAstronautComplexSpawn);
            }
            if (methodName.Equals("onGUIAstronautComplexDespawn")) {
                GameEvents.onGUIAstronautComplexDespawn.Remove(onGUIAstronautComplexDespawn);
            }
            if (methodName.Equals("onGUIRnDComplexSpawn")) {
                GameEvents.onGUIRnDComplexSpawn.Remove(onGUIRnDComplexSpawn);
            }
            if (methodName.Equals("onGUIRnDComplexDespawn")) {
                GameEvents.onGUIRnDComplexDespawn.Remove(onGUIRnDComplexDespawn);
            }
            if (methodName.Equals("onGUIMissionControlSpawn")) {
                GameEvents.onGUIMissionControlSpawn.Remove(onGUIMissionControlSpawn);
            }
            if (methodName.Equals("onGUIMissionControlDespawn")) {
                GameEvents.onGUIMissionControlDespawn.Remove(onGUIMissionControlDespawn);
            }
            if (methodName.Equals("onGUIRecoveryDialogSpawn")) {
                GameEvents.onGUIRecoveryDialogSpawn.Remove(onGUIRecoveryDialogSpawn);
            }
            if (methodName.Equals("onGUIRecoveryDialogDespawn")) {
                GameEvents.onGUIRecoveryDialogDespawn.Remove(onGUIRecoveryDialogDespawn);
            }
            if (methodName.Equals("onHideUI")) {
                GameEvents.onHideUI.Remove(onHideUI);
            }
            if (methodName.Equals("onShowUI")) {
                GameEvents.onShowUI.Remove(onShowUI);
            }
            if (methodName.Equals("onGUIPrefabLauncherReady")) {
                GameEvents.onGUIPrefabLauncherReady.Remove(onGUIPrefabLauncherReady);
            }
            if (methodName.Equals("onGUIApplicationLauncherReady")) {
                GameEvents.onGUIApplicationLauncherReady.Remove(onGUIApplicationLauncherReady);
            }
            if (methodName.Equals("onGUIApplicationLauncherDestroyed")) {
                GameEvents.onGUIApplicationLauncherDestroyed.Remove(onGUIApplicationLauncherDestroyed);
            }
            if (methodName.Equals("onGUIMessageSystemReady")) {
                GameEvents.onGUIMessageSystemReady.Remove(onGUIMessageSystemReady);
            }
            if (methodName.Equals("onEditorShipModified")) {
                GameEvents.onEditorShipModified.Remove(onEditorShipModified);
            }
            if (methodName.Equals("OnTechnologyResearched")) {
                GameEvents.OnTechnologyResearched.Remove(OnTechnologyResearched);
            }
            if (methodName.Equals("OnPartPurchased")) {
                GameEvents.OnPartPurchased.Remove(OnPartPurchased);
            }
            if (methodName.Equals("OnVesselRollout")) {
                GameEvents.OnVesselRollout.Remove(OnVesselRollout);
            }
            if (methodName.Equals("OnProgressReached")) {
                GameEvents.OnProgressReached.Remove(OnProgressReached);
            }
            if (methodName.Equals("OnProgressComplete")) {
                GameEvents.OnProgressComplete.Remove(OnProgressComplete);
            }
            if (methodName.Equals("OnProgressAchieved")) {
                GameEvents.OnProgressAchieved.Remove(OnProgressAchieved);
            }
            if (methodName.Equals("OnScienceRecieved")) {
                GameEvents.OnScienceRecieved.Remove(OnScienceRecieved);
            }
            if (methodName.Equals("OnReputationChanged")) {
                GameEvents.OnReputationChanged.Remove(OnReputationChanged);
            }
            if (methodName.Equals("OnScienceChanged")) {
                GameEvents.OnScienceChanged.Remove(OnScienceChanged);
            }
            if (methodName.Equals("OnFundsChanged")) {
                GameEvents.OnFundsChanged.Remove(OnFundsChanged);
            }
            if (methodName.Equals("onVesselRecoveryProcessing")) {
                GameEvents.onVesselRecoveryProcessing.Remove(onVesselRecoveryProcessing);
            }
        }
        
        void onJointBreak(EventReport data) {
            Debug.Log("Event onJointBreak was invoked!!!");
        }
        
        void onCrash(EventReport data) {
            Debug.Log("Event onCrash was invoked!!!");
        }
        
        void onCrashSplashdown(EventReport data) {
            Debug.Log("Event onCrashSplashdown was invoked!!!");
        }
        
        void onCollision(EventReport data) {
            Debug.Log("Event onCollision was invoked!!!");
        }
        
        void onOverheat(EventReport data) {
            Debug.Log("Event onOverheat was invoked!!!");
        }
        
        void onStageSeparation(EventReport data) {
            Debug.Log("Event onStageSeparation was invoked!!!");
        }
        
        void onCrewOnEva(GameEvents.FromToAction<Part, Part> data) {
            Debug.Log("Event onCrewOnEva was invoked!!!");
        }
        
        void onCrewKilled(EventReport data) {
            Debug.Log("Event onCrewKilled was invoked!!!");
        }
        
        void onKerbalAdded(ProtoCrewMember data) {
            Debug.Log("Event onKerbalAdded was invoked!!!");
        }
        
        void onKerbalRemoved(ProtoCrewMember data) {
            Debug.Log("Event onKerbalRemoved was invoked!!!");
        }
        
        void onKerbalTypeChange(ProtoCrewMember data1, ProtoCrewMember.KerbalType data2, ProtoCrewMember.KerbalType data3) {
            Debug.Log("Event onKerbalTypeChange was invoked!!!");
        }
        
        void onKerbalStatusChange(ProtoCrewMember data1, ProtoCrewMember.RosterStatus data2, ProtoCrewMember.RosterStatus data3) {
            Debug.Log("Event onKerbalStatusChange was invoked!!!");
        }
        
        void onCrewBoardVessel(GameEvents.FromToAction<Part, Part> data) {
            Debug.Log("Event onCrewBoardVessel was invoked!!!");
        }
        
        void onLaunch(EventReport data) {
            Debug.Log("Event onLaunch was invoked!!!");
        }
        
        void onUndock(EventReport data) {
            Debug.Log("Event onUndock was invoked!!!");
        }
        
        void onSplashDamage(EventReport data) {
            Debug.Log("Event onSplashDamage was invoked!!!");
        }
        
        void onNewVesselCreated(Vessel data) {
            Debug.Log("Event onNewVesselCreated was invoked!!!");
        }
        
        void onVesselWillDestroy(Vessel data) {
            Debug.Log("Event onVesselWillDestroy was invoked!!!");
        }
        
        void onVesselCreate(Vessel data) {
            Debug.Log("Event onVesselCreate was invoked!!!");
        }
        
        void onVesselDestroy(Vessel data) {
            Debug.Log("Event onVesselDestroy was invoked!!!");
        }
        
        void onVesselChange(Vessel data) {
            Debug.Log("Event onVesselChange was invoked!!!");
        }
        
        void onVesselSituationChange(GameEvents.HostedFromToAction<Vessel, Vessel.Situations> data) {
            Debug.Log("Event onVesselSituationChange was invoked!!!");
        }
        
        void onKnowledgeChanged(GameEvents.HostedFromToAction<IDiscoverable, DiscoveryLevels> data) {
            Debug.Log("Event onKnowledgeChanged was invoked!!!");
        }
        
        void onVesselRename(GameEvents.HostedFromToAction<Vessel, string> data) {
            Debug.Log("Event onVesselRename was invoked!!!");
        }
        
        void onVesselGoOnRails(Vessel data) {
            Debug.Log("Event onVesselGoOnRails was invoked!!!");
        }
        
        void onVesselGoOffRails(Vessel data) {
            Debug.Log("Event onVesselGoOffRails was invoked!!!");
        }
        
        void onVesselLoaded(Vessel data) {
            Debug.Log("Event onVesselLoaded was invoked!!!");
        }
        
        void onVesselWasModified(Vessel data) {
            Debug.Log("Event onVesselWasModified was invoked!!!");
        }
        
        void onVesselSOIChanged(GameEvents.HostedFromToAction<Vessel, CelestialBody> data) {
            Debug.Log("Event onVesselSOIChanged was invoked!!!");
        }
        
        void onVesselOrbitClosed(Vessel data) {
            Debug.Log("Event onVesselOrbitClosed was invoked!!!");
        }
        
        void onVesselOrbitEscaped(Vessel data) {
            Debug.Log("Event onVesselOrbitEscaped was invoked!!!");
        }
        
        void OnVesselRecoveryRequested(Vessel data) {
            Debug.Log("Event OnVesselRecoveryRequested was invoked!!!");
        }
        
        void onVesselRecovered(ProtoVessel data) {
            Debug.Log("Event onVesselRecovered was invoked!!!");
        }
        
        void onVesselTerminated(ProtoVessel data) {
            Debug.Log("Event onVesselTerminated was invoked!!!");
        }
        
        void onSameVesselDock(GameEvents.FromToAction<ModuleDockingNode, ModuleDockingNode> data) {
            Debug.Log("Event onSameVesselDock was invoked!!!");
        }
        
        void onSameVesselUndock(GameEvents.FromToAction<ModuleDockingNode, ModuleDockingNode> data) {
            Debug.Log("Event onSameVesselUndock was invoked!!!");
        }
        
        void onStageActivate(int data) {
            Debug.Log("Event onStageActivate was invoked!!!");
        }
        
        void onDominantBodyChange(GameEvents.FromToAction<CelestialBody, CelestialBody> data) {
            Debug.Log("Event onDominantBodyChange was invoked!!!");
        }
        
        void onKrakensbaneEngage(Vector3d data) {
            Debug.Log("Event onKrakensbaneEngage was invoked!!!");
        }
        
        void onKrakensbaneDisengage(Vector3d data) {
            Debug.Log("Event onKrakensbaneDisengage was invoked!!!");
        }
        
        void onFloatingOriginShift(Vector3d data) {
            Debug.Log("Event onFloatingOriginShift was invoked!!!");
        }
        
        void onRotatingFrameTransition(GameEvents.HostTargetAction<CelestialBody, bool> data) {
            Debug.Log("Event onRotatingFrameTransition was invoked!!!");
        }
        
        void onGamePause() {
            Debug.Log("Event onGamePause was invoked!!!");
        }
        
        void onGameUnpause() {
            Debug.Log("Event onGameUnpause was invoked!!!");
        }
        
        void onFlightReady() {
            Debug.Log("Event onFlightReady was invoked!!!");
        }
        
        void onTimeWarpRateChanged() {
            Debug.Log("Event onTimeWarpRateChanged was invoked!!!");
        }
        
        void onGameSceneLoadRequested(GameScenes data) {
            Debug.Log("Event onGameSceneLoadRequested was invoked!!!");
        }
        
        void onLevelWasLoaded(GameScenes data) {
            Debug.Log("Event onLevelWasLoaded was invoked!!!");
        }
        
        void onPlanetariumTargetChanged(MapObject data) {
            Debug.Log("Event onPlanetariumTargetChanged was invoked!!!");
        }
        
        void onGameStateSaved(Game data) {
            Debug.Log("Event onGameStateSaved was invoked!!!");
        }
        
        void onGameStateCreated(Game data) {
            Debug.Log("Event onGameStateCreated was invoked!!!");
        }
        
        void onGameStateSave(ConfigNode data) {
            Debug.Log("Event onGameStateSave was invoked!!!");
        }
        
        void onGameStateLoad(ConfigNode data) {
            Debug.Log("Event onGameStateLoad was invoked!!!");
        }
        
        void onInputLocksModified(GameEvents.FromToAction<ControlTypes, ControlTypes> data) {
            Debug.Log("Event onInputLocksModified was invoked!!!");
        }
        
        void OnGameSettingsApplied() {
            Debug.Log("Event OnGameSettingsApplied was invoked!!!");
        }
        
        void onPartPack(Part data) {
            Debug.Log("Event onPartPack was invoked!!!");
        }
        
        void onPartUnpack(Part data) {
            Debug.Log("Event onPartUnpack was invoked!!!");
        }
        
        void onPartExplode(GameEvents.ExplosionReaction data) {
            Debug.Log("Event onPartExplode was invoked!!!");
        }
        
        void onPartDie(Part data) {
            Debug.Log("Event onPartDie was invoked!!!");
        }
        
        void onPartDestroyed(Part data) {
            Debug.Log("Event onPartDestroyed was invoked!!!");
        }
        
        void onPartJointBreak(PartJoint data) {
            Debug.Log("Event onPartJointBreak was invoked!!!");
        }
        
        void onPartUndock(Part data) {
            Debug.Log("Event onPartUndock was invoked!!!");
        }
        
        void onPartCouple(GameEvents.FromToAction<Part, Part> data) {
            Debug.Log("Event onPartCouple was invoked!!!");
        }
        
        void onPartAttach(GameEvents.HostTargetAction<Part, Part> data) {
            Debug.Log("Event onPartAttach was invoked!!!");
        }
        
        void onPartRemove(GameEvents.HostTargetAction<Part, Part> data) {
            Debug.Log("Event onPartRemove was invoked!!!");
        }
        
        void onPartActionUICreate(Part data) {
            Debug.Log("Event onPartActionUICreate was invoked!!!");
        }
        
        void onPartActionUIDismiss(Part data) {
            Debug.Log("Event onPartActionUIDismiss was invoked!!!");
        }
        
        void onFlagSelect(string data) {
            Debug.Log("Event onFlagSelect was invoked!!!");
        }
        
        void onMissionFlagSelect(string data) {
            Debug.Log("Event onMissionFlagSelect was invoked!!!");
        }
        
        void onFlagPlant(Vessel data) {
            Debug.Log("Event onFlagPlant was invoked!!!");
        }
        
        void onActiveJointNeedUpdate(Vessel data) {
            Debug.Log("Event onActiveJointNeedUpdate was invoked!!!");
        }
        
        void onGUILaunchScreenSpawn(GameEvents.VesselSpawnInfo data) {
            Debug.Log("Event onGUILaunchScreenSpawn was invoked!!!");
        }
        
        void onGUILaunchScreenDespawn() {
            Debug.Log("Event onGUILaunchScreenDespawn was invoked!!!");
        }
        
        void onGUILaunchScreenVesselSelected(ShipTemplate data) {
            Debug.Log("Event onGUILaunchScreenVesselSelected was invoked!!!");
        }
        
        void onGUIAstronautComplexSpawn() {
            Debug.Log("Event onGUIAstronautComplexSpawn was invoked!!!");
        }
        
        void onGUIAstronautComplexDespawn() {
            Debug.Log("Event onGUIAstronautComplexDespawn was invoked!!!");
        }
        
        void onGUIRnDComplexSpawn() {
            Debug.Log("Event onGUIRnDComplexSpawn was invoked!!!");
        }
        
        void onGUIRnDComplexDespawn() {
            Debug.Log("Event onGUIRnDComplexDespawn was invoked!!!");
        }
        
        void onGUIMissionControlSpawn() {
            Debug.Log("Event onGUIMissionControlSpawn was invoked!!!");
        }
        
        void onGUIMissionControlDespawn() {
            Debug.Log("Event onGUIMissionControlDespawn was invoked!!!");
        }
        
        void onGUIRecoveryDialogSpawn(MissionRecoveryDialog data) {
            Debug.Log("Event onGUIRecoveryDialogSpawn was invoked!!!");
        }
        
        void onGUIRecoveryDialogDespawn(MissionRecoveryDialog data) {
            Debug.Log("Event onGUIRecoveryDialogDespawn was invoked!!!");
        }
        
        void onHideUI() {
            Debug.Log("Event onHideUI was invoked!!!");
        }
        
        void onShowUI() {
            Debug.Log("Event onShowUI was invoked!!!");
        }
        
        void onGUIPrefabLauncherReady() {
            Debug.Log("Event onGUIPrefabLauncherReady was invoked!!!");
        }
        
        void onGUIApplicationLauncherReady() {
            Debug.Log("Event onGUIApplicationLauncherReady was invoked!!!");
        }
        
        void onGUIApplicationLauncherDestroyed() {
            Debug.Log("Event onGUIApplicationLauncherDestroyed was invoked!!!");
        }
        
        void onGUIMessageSystemReady() {
            Debug.Log("Event onGUIMessageSystemReady was invoked!!!");
        }
        
        void onEditorShipModified(ShipConstruct data) {
            Debug.Log("Event onEditorShipModified was invoked!!!");
        }
        
        void OnTechnologyResearched(GameEvents.HostTargetAction<RDTech, RDTech.OperationResult> data) {
            Debug.Log("Event OnTechnologyResearched was invoked!!!");
        }
        
        void OnPartPurchased(AvailablePart data) {
            Debug.Log("Event OnPartPurchased was invoked!!!");
        }
        
        void OnVesselRollout(ShipConstruct data) {
            Debug.Log("Event OnVesselRollout was invoked!!!");
        }
        
        void OnProgressReached(ProgressNode data) {
            Debug.Log("Event OnProgressReached was invoked!!!");
        }
        
        void OnProgressComplete(ProgressNode data) {
            Debug.Log("Event OnProgressComplete was invoked!!!");
        }
        
        void OnProgressAchieved(ProgressNode data) {
            Debug.Log("Event OnProgressAchieved was invoked!!!");
        }
        
        void OnScienceRecieved(float data1, ScienceSubject data2) {
            Debug.Log("Event OnScienceRecieved was invoked!!!");
        }
        
        void OnReputationChanged(float data) {
            Debug.Log("Event OnReputationChanged was invoked!!!");
        }
        
        void OnScienceChanged(float data) {
            Debug.Log("Event OnScienceChanged was invoked!!!");
        }
        
        void OnFundsChanged(double data) {
            Debug.Log("Event OnFundsChanged was invoked!!!");
        }
        
        void onVesselRecoveryProcessing(ProtoVessel data1, MissionRecoveryDialog data2, float data3) {
            Debug.Log("Event onVesselRecoveryProcessing was invoked!!!");
        }
    }
}
